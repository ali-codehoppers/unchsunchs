/**************************************************************************
-- -Generated by xSQL SDK for Schema Comparison and Synchronization
-- -Date/Time: June 16, 2010 05:04:46

-- -Summary:
    Contains the T-SQL script that makes the database 
    .\SQLEXPRESS.hstodel the same as the database .\SQLEXPRESS.HS22

-- -Action:
    Execute this script on .\SQLEXPRESS.hstodel

-- -SQL Server version: 10.0.1600
**************************************************************************/

BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	SET QUOTED_IDENTIFIER ON
	SET ANSI_NULLS ON
	SET ANSI_PADDING ON
	SET ANSI_WARNINGS ON
	SET ARITHABORT ON
	SET NUMERIC_ROUNDABORT OFF
	SET CONCAT_NULL_YIELDS_NULL ON
	SET XACT_ABORT ON
COMMIT TRANSACTION
GO

IF EXISTS (select * from tempdb..sysobjects where id = OBJECT_ID('tempdb..#ErrorLog')) 
	DROP TABLE #ErrorLog 
CREATE TABLE #ErrorLog 
( pkid [int] IDENTITY(1,1) NOT NULL, errno [int] NOT NULL, errdescr [varchar](100) NULL )
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
ALTER PROCEDURE [dbo].[DepartmentOrderSearchCommand] 
@dept_id int,
@site_add varchar(100),
@ord_ref varchar(32),
@client_ref varchar(32),
@from_date varchar(20),
@to_date varchar(20),
@postal_code varchar(9)
AS
BEGIN
Select un_co_dept_ords.sequence,un_co_dept_details.co_name_short as department,un_co_dept_ords.order_ref,un_co_dept_ords.order_sms,
    un_co_dept_ords.order_client_ref,un_co_dept_ords.date_order_created,un_co_dept_ords.address_no,
    un_co_dept_ords.address_line1,un_co_dept_ords.address_line2,un_co_dept_ords.address_line3,un_co_dept_ords.address_line4,
    un_co_dept_ords.address_line5,un_co_dept_ords.address_post_code,
	un_co_dept_ords.date_order_review,un_co_dept_ords.flg_cancelled,count(order_docs.order_id) as num_of_risk_assessments
from [un_co_dept_ords]
inner join [un_co_dept_details]  on un_co_dept_ords.dept_id = un_co_dept_details.dept_id
left join 
(
	select un_co_dept_ord_docs.co_id,un_co_dept_ord_docs.dept_id,un_co_dept_ord_docs.order_id
      from un_co_dept_ord_docs
	 inner join dbo.un_co_dept_template_docs 
		on un_co_dept_ord_docs.co_id = un_co_dept_template_docs.co_id
	   and un_co_dept_ord_docs.dept_id = un_co_dept_template_docs.dept_id 
	   and un_co_dept_ord_docs.doc_id = un_co_dept_template_docs.doc_id
	 inner join dbo.un_co_dept_doc_type
	    on un_co_dept_doc_type.co_id = un_co_dept_template_docs.co_id
	   and un_co_dept_doc_type.dept_id = un_co_dept_template_docs.dept_id
	   and un_co_dept_doc_type.doc_data_type_id = un_co_dept_template_docs.doc_type_id
	 where un_co_dept_doc_type.doc_data_type_desc = 'Risk Assessments'
) order_docs on order_docs.co_id = un_co_dept_ords.co_id
			and order_docs.dept_id = un_co_dept_ords.dept_id
			and order_docs.order_id = un_co_dept_ords.sequence
where un_co_dept_ords.dept_id =@dept_id
and (@site_add IS null  or un_co_dept_ords.address_full = @site_add)
and (@ord_ref IS null  or un_co_dept_ords.order_ref = @ord_ref)
and (@client_ref IS null  or un_co_dept_ords.order_client_ref = @client_ref)
and (@from_date IS null  or un_co_dept_ords.date_created >= convert(datetime,@from_date,103))
and (@to_date IS null  or un_co_dept_ords.date_created <= dateadd(d,1,convert(datetime,@to_date,103)))
and (@postal_code IS null or un_co_dept_ords.address_post_code = @postal_code)
and un_co_dept_ords.flg_delete = 0
group by un_co_dept_ords.sequence,un_co_dept_details.co_name_short,un_co_dept_ords.order_ref,un_co_dept_ords.order_sms,
    un_co_dept_ords.order_client_ref,un_co_dept_ords.date_order_created,un_co_dept_ords.address_no,un_co_dept_ords.address_line1,
    un_co_dept_ords.address_line2,un_co_dept_ords.address_line3,un_co_dept_ords.address_line4,un_co_dept_ords.address_line5,
    un_co_dept_ords.address_post_code,un_co_dept_ords.date_order_review,un_co_dept_ords.flg_cancelled
order by date_order_created desc 
END

UPDATE un_co_dept_template_sections
SET section_desc = 'ACTIVITY /PROCESS/ TASK DESCRIPTION'
 WHERE section_desc = '1. ACTIVITY /PROCESS BEING ASSESSED';
 
UPDATE un_co_dept_template_sections
SET section_desc = '2. RELEVANT REGULATIONS/CODES OF PRACTICE/GUIDANCE'
 WHERE section_desc = '2.REGULATIONS/CODES/GUIDANCE';

UPDATE un_co_dept_template_sections
SET section_desc = '4. PERSONS AT RISK'
 WHERE section_desc = '4. PEOPLE AT RISK';
 
UPDATE un_co_dept_template_sections
SET section_desc = UPPER(section_desc)
 WHERE section_desc = '5. Frequency and Duration of Exposure to the Risk';
 
 UPDATE un_co_dept_template_sections
 SET section_desc = '8. ANY FURTHER ACTION/ ONGOING MANGEMENT ACTION REQUIRED?'
 WHERE section_desc = '8. MANAGEMENT ACTION:';
 
 UPDATE un_co_dept_template_sections
 SET section_desc = 'RISK RATING WITH CONTROLS IN PLACE (SEVERITY x PROBABILITY):'
 WHERE section_desc = '7. RISK RATING WITH PRECAUTIONS:';
 
 UPDATE un_co_dept_template_sections
 SET section_desc = 'SEVERITY:'
  where section_desc = 'SEVERITY + PROB:';
  
 UPDATE un_co_dept_template_sections
 SET section_desc = 'PROBABILITY:'
  where section_desc = 'LIKELIHOOD:';
  
 UPDATE un_co_dept_doc_type 
    SET num_of_sections = 12
  WHERE doc_data_type_desc = 'Risk Assessments';

 UPDATE un_co_dept_template_sections
   SET section_index = 7
where section_desc = 'SEVERITY:';

 UPDATE un_co_dept_template_sections
   SET section_index = 9
where section_desc = 'RISK RATING WITH CONTROLS IN PLACE (SEVERITY x PROBABILITY):';

-- three SP Doc Section Selects

INSERT INTO un_co_dept_template_sections(flg_delete,co_id,dept_id,section_index,section_desc,section_type,
	doc_type_id,repeat_columns)
Select flg_delete,co_id,dept_id,12,'12. RISK ASSESSMENT TOP BE SUPPORTED BY THE FOLLOWING DOCUMENTATION',
	'MULTIPLE_SELECT_LIST',doc_type_id,3
 from un_co_dept_template_sections
WHERE section_desc = 'RISK RATING WITH CONTROLS IN PLACE (SEVERITY x PROBABILITY):';

Select *
  from  un_co_dept_template_sections
    where section_desc = '12. RISK ASSESSMENT TOP BE SUPPORTED BY THE FOLLOWING DOCUMENTATION';
 


GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to alter stored procedure dbo.DepartmentOrderSearchCommand')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
ALTER PROCEDURE [dbo].[DocSectionSelectById]
	@co_id int,
	@dept_id int,
	@section_id int
AS
	SET NOCOUNT ON;
SELECT        un_co_dept_template_sections.*
FROM            un_co_dept_template_sections
WHERE co_id = @co_id
and dept_id = @dept_id
and section_id = @section_id
and flg_delete = 0
order by section_index
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to alter stored procedure dbo.DocSectionSelectById')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
ALTER PROCEDURE [dbo].[DocSectionSelectByName]
	@co_id int,
	@dept_id int,
	@section_desc varchar(100)
AS
	SET NOCOUNT ON;
SELECT        un_co_dept_template_sections.*
FROM            un_co_dept_template_sections
WHERE co_id = @co_id
and dept_id = @dept_id
and section_desc = @section_desc
and flg_delete = 0
order by section_index
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to alter stored procedure dbo.DocSectionSelectByName')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
ALTER PROCEDURE [dbo].[DocSectionSelectCommand]
	@co_id int,
	@dept_id int,
	@doc_type_id int
AS
	SET NOCOUNT ON;
SELECT        un_co_dept_template_sections.*
FROM            un_co_dept_template_sections
WHERE co_id = @co_id
and dept_id = @dept_id
and doc_type_id = @doc_type_id
and flg_delete = 0
order by section_index
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to alter stored procedure dbo.DocSectionSelectCommand')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF EXISTS (Select * from #ErrorLog)
BEGIN
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
END
ELSE
BEGIN
	IF @@TRANCOUNT>0 COMMIT TRANSACTION
END
IF EXISTS (Select * from #ErrorLog)
BEGIN
	Print 'Database synchronization script failed'
	GOTO QuitWithErrors
END
ELSE
BEGIN
	Print 'Database synchronization completed successfully'
END



QuitWithErrors:


