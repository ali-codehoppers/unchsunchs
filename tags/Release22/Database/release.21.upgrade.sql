/**************************************************************************
-- -Generated by xSQL SDK for Schema Comparison and Synchronization
-- -Date/Time: April 20, 2010 23:17:18

-- -Summary:
    Contains the T-SQL script that makes the database 
    .\SQLEXPRESS.HSRelease the same as the database .\SQLEXPRESS.HSTEST

-- -Action:
    Execute this script on .\SQLEXPRESS.HSRelease

-- -SQL Server version: 10.0.1600
**************************************************************************/

BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	SET QUOTED_IDENTIFIER ON
	SET ANSI_NULLS ON
	SET ANSI_PADDING ON
	SET ANSI_WARNINGS ON
	SET ARITHABORT ON
	SET NUMERIC_ROUNDABORT OFF
	SET CONCAT_NULL_YIELDS_NULL ON
	SET XACT_ABORT ON
COMMIT TRANSACTION
GO

IF EXISTS (select * from tempdb..sysobjects where id = OBJECT_ID('tempdb..#ErrorLog')) 
	DROP TABLE #ErrorLog 
CREATE TABLE #ErrorLog 
( pkid [int] IDENTITY(1,1) NOT NULL, errno [int] NOT NULL, errdescr [varchar](100) NULL )
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[TransferHazard]
(
	@source_hazard_id int,
	@target_co_id int,
	@target_dept_id int,
	@user_id int
)
AS
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRANSACTION    -- Start the transaction	
   
	DECLARE @source_hazard_name varchar(255);
	DECLARE @source_hazard_default bit;
	DECLARE @source_category_name varchar(250);
	DECLARE @source_category_type char(1);
	
	SELECT @source_hazard_name = name_desc,@source_hazard_default = flg_default,@source_category_name = un_co_dept_categories.category_name,
		@source_category_type = un_co_dept_categories.category_type
	  FROM un_ref_co_dept_hazards
	INNER JOIN un_co_dept_categories ON un_ref_co_dept_hazards.category_id = un_co_dept_categories.category_id	  
	 WHERE sequence = @source_hazard_id;
	
	DECLARE @target_hazard_count int;
	SELECT @target_hazard_count = COUNT(0)
	  FROM un_ref_co_dept_hazards
	 WHERE co_id = @target_co_id
	   AND dept_id = @target_dept_id
	   AND name_desc = @source_hazard_name;
	   
	IF @target_hazard_count = 0
	BEGIN
		
		DECLARE @target_category_id int;
		
		SELECT @target_category_id = category_id
		  FROM un_co_dept_categories
		 WHERE category_name = @source_category_name
		   AND co_id = @target_co_id
		   AND dept_id = @target_dept_id
		   AND category_type = @source_category_type;
		   
		IF @@ROWCOUNT = 0
		BEGIN
			INSERT 
			  INTO	un_co_dept_categories(category_name,category_type,co_id,dept_id,flg_delete)
			 VALUES (@source_category_name,@source_category_type,@target_co_id,@target_dept_id,0);
			
			SELECT @target_category_id = @@IDENTITY;	 
		END
		
		DECLARE @index int;
		SELECT @index = ISNULL(MAX(index_seq),0) + 1 
		 FROM un_ref_co_dept_hazards
		WHERE co_id = @target_co_id
		 AND dept_id = @target_dept_id;
		
		INSERT 
		  INTO un_ref_co_dept_hazards(category_id,co_id,created_by,date_created,date_last_amended,dept_id,flg_default,
				flg_deleted,index_seq,last_amended_by,name_desc)
	    VALUES (@target_category_id,@target_co_id,@user_id,GETDATE(),GETDATE(),@target_dept_id,@source_hazard_default,0,@index,@user_id,@source_hazard_name);
	END
	
	COMMIT;

END TRY
BEGIN CATCH
  -- Whoops, there was an error
  IF @@TRANCOUNT > 0
     ROLLBACK
 
  -- Raise an error with the details of the exception
  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
  SELECT @ErrMsg = ERROR_MESSAGE(),
         @ErrSeverity = ERROR_SEVERITY()
 
  RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.TransferHazard')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[TransferPeople]
(
	@source_person_id int,
	@target_co_id int,
	@target_dept_id int,
	@user_id int
)
AS
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRANSACTION    -- Start the transaction	
   
	DECLARE @source_person_name varchar(255);
	DECLARE @source_flg_fire_warden bit;
	DECLARE @source_flg_first_aider bit;
	DECLARE @source_flg_supervisor bit;
	SELECT @source_person_name = name_desc,@source_flg_fire_warden = flg_fire_warden,@source_flg_first_aider = flg_first_aider,@source_flg_supervisor = flg_supervisor
	  FROM un_ref_co_dept_people
	 WHERE sequence = @source_person_id;
	
	DECLARE @target_person_count int;
	SELECT @target_person_count = COUNT(0)
	  FROM un_ref_co_dept_people
	 WHERE co_id = @target_co_id
	   AND dept_id = @target_dept_id
	   AND name_desc = @source_person_name;
	   
	IF @target_person_count = 0
	BEGIN
		
		DECLARE @index int;
		SELECT @index = ISNULL(MAX(index_seq),0) + 1 
		 FROM un_ref_co_dept_people
		WHERE co_id = @target_co_id
		 AND dept_id = @target_dept_id;
		
		INSERT 
		  INTO un_ref_co_dept_people(co_id,created_by,date_created,date_last_amended,dept_id,flg_deleted,flg_fire_warden,flg_first_aider,flg_supervisor,
			index_seq,last_ammended_by,name_desc)
	    VALUES (@target_co_id,@user_id,GETDATE(),GETDATE(),@target_dept_id,0,@source_flg_fire_warden,@source_flg_first_aider,@source_flg_supervisor,
			@index,@user_id,@source_person_name);
	END
	
	COMMIT;

END TRY
BEGIN CATCH
  -- Whoops, there was an error
  IF @@TRANCOUNT > 0
     ROLLBACK
 
  -- Raise an error with the details of the exception
  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
  SELECT @ErrMsg = ERROR_MESSAGE(),
         @ErrSeverity = ERROR_SEVERITY()
 
  RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.TransferPeople')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[TransferPPE]
(
	@source_ppe_id int,
	@target_co_id int,
	@target_dept_id int,
	@user_id int
)
AS
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRANSACTION    -- Start the transaction	
   
	DECLARE @source_ppe_name varchar(255);
	DECLARE @source_ppe_default bit;
	DECLARE @source_category_name varchar(250);
	DECLARE @source_category_type char(1);
	
	SELECT @source_ppe_name = name_desc,@source_ppe_default = flg_default,@source_category_name = category_name,@source_category_type = category_type
	  FROM un_ref_co_dept_ppe
	INNER JOIN un_co_dept_categories ON un_ref_co_dept_ppe.category_id = un_co_dept_categories.category_id	  
	 WHERE sequence = @source_ppe_id;
	
	DECLARE @target_ppe_count int;
	SELECT @target_ppe_count = COUNT(0)
	  FROM un_ref_co_dept_ppe
	 WHERE co_id = @target_co_id
	   AND dept_id = @target_dept_id
	   AND name_desc = @source_ppe_name;
	   
	IF @target_ppe_count = 0
	BEGIN
		
		
		DECLARE @target_category_id int;
		SELECT @target_category_id = category_id
		  FROM un_co_dept_categories
		 WHERE category_name = @source_category_name
		   AND co_id = @target_co_id
		   AND dept_id = @target_dept_id
		   AND category_type = @source_category_type;
		   
		IF @@ROWCOUNT = 0
		BEGIN
			INSERT 
			  INTO	un_co_dept_categories(category_name,category_type,co_id,dept_id,flg_delete)
			 VALUES (@source_category_name,@source_category_type,@target_co_id,@target_dept_id,0);
			
			SELECT @target_category_id = @@IDENTITY;	 
		END
		
		DECLARE @index int;
		SELECT @index = ISNULL(MAX(index_seq),0) + 1 
		 FROM un_ref_co_dept_ppe
		WHERE co_id = @target_co_id
		 AND dept_id = @target_dept_id;
		
		INSERT 
		  INTO un_ref_co_dept_ppe(category_id,co_id,created_by,date_created,date_last_amended,dept_id,flg_default,
				flg_deleted,index_seq,last_amended_by,name_desc)
	    VALUES (@target_category_id,@target_co_id,@user_id,GETDATE(),GETDATE(),@target_dept_id,@source_ppe_default,0,@index,@user_id,@source_ppe_name);
	END
	
	COMMIT;

END TRY
BEGIN CATCH
  -- Whoops, there was an error
  IF @@TRANCOUNT > 0
     ROLLBACK
 
  -- Raise an error with the details of the exception
  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
  SELECT @ErrMsg = ERROR_MESSAGE(),
         @ErrSeverity = ERROR_SEVERITY()
 
  RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.TransferPPE')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[TransferSuggestion]
(
	@source_suggestion_id int,
	@target_co_id int,
	@target_dept_id int,
	@user_id int
)
AS
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRANSACTION    -- Start the transaction	
   
	DECLARE @source_suggestion_text varchar(255);
	DECLARE @source_suggestion_type char(1);
	DECLARE @source_suggestion_default bit;
	DECLARE @source_category_type char(1);
	DECLARE @source_category_name varchar(250);
	
	SELECT	@source_suggestion_text = suggestion_text,@source_suggestion_type = suggestion_type, @source_suggestion_default = flg_default,
			@source_category_type = category_type,@source_category_name = category_name
	  FROM un_ref_co_dept_suggestions
	 INNER JOIN un_co_dept_categories ON un_co_dept_categories.category_id = un_ref_co_dept_suggestions.category_id
	 WHERE suggestion_id = @source_suggestion_id;
	
	DECLARE @target_suggestion_count int;
	SELECT @target_suggestion_count = COUNT(0)
	  FROM un_ref_co_dept_suggestions
	 WHERE co_id = @target_co_id
	   AND dept_id = @target_dept_id
	   AND suggestion_type = @source_suggestion_type
	   AND suggestion_text = @source_suggestion_text;
	   
	IF @target_suggestion_count = 0
	BEGIN
		
		DECLARE @target_category_id int;
		SELECT @target_category_id = category_id
		  FROM un_co_dept_categories
		 WHERE category_name = @source_category_name
		   AND category_type = @source_category_type
		   AND co_id = @target_co_id
		   AND dept_id = @target_dept_id;
		   
		IF @@ROWCOUNT = 0
		BEGIN
			INSERT 
			  INTO	un_co_dept_categories(category_name,category_type,co_id,dept_id,flg_delete)
			 VALUES (@source_category_name,@source_category_type,@target_co_id,@target_dept_id,0);
			
			SELECT @target_category_id = @@IDENTITY;	 
		END
		
		DECLARE @index int;
		SELECT @index = ISNULL(MAX(index_seq),0) + 1 
		 FROM un_ref_co_dept_suggestions
		WHERE co_id = @target_co_id
		 AND dept_id = @target_dept_id
		 AND suggestion_type = @source_category_type;
		
		INSERT 
		  INTO un_ref_co_dept_suggestions(category_id,co_id,dept_id,flg_default,flg_deleted,index_seq,suggestion_text,suggestion_type)
	    VALUES (@target_category_id,@target_co_id,@target_dept_id,@source_suggestion_default,0,@index,@source_suggestion_text,@source_suggestion_type);
	END
	
	COMMIT;

END TRY
BEGIN CATCH
  -- Whoops, there was an error
  IF @@TRANCOUNT > 0
     ROLLBACK
 
  -- Raise an error with the details of the exception
  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
  SELECT @ErrMsg = ERROR_MESSAGE(),
         @ErrSeverity = ERROR_SEVERITY()
 
  RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.TransferSuggestion')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[TransferTool]
(
	@source_tool_id int,
	@target_co_id int,
	@target_dept_id int,
	@user_id int
)
AS
	SET NOCOUNT ON;
BEGIN TRY
	BEGIN TRANSACTION    -- Start the transaction	
   
	DECLARE @source_tool_name varchar(255);
	DECLARE @source_tool_default bit;
	DECLARE @source_category_name varchar(250);
	DECLARE @source_category_type char(1);
	
	SELECT @source_tool_name = name_desc,@source_tool_default = flg_default,@source_category_name = un_co_dept_categories.category_name,
		@source_category_type = category_type
	  FROM un_ref_co_dept_tools
	INNER JOIN un_co_dept_categories ON un_ref_co_dept_tools.category_id = un_co_dept_categories.category_id	  
	 WHERE sequence = @source_tool_id;
	
	DECLARE @target_tool_count int;
	SELECT @target_tool_count = COUNT(0)
	  FROM un_ref_co_dept_tools
	 WHERE co_id = @target_co_id
	   AND dept_id = @target_dept_id
	   AND name_desc = @source_tool_name;
	   
	IF @target_tool_count = 0
	BEGIN
		
	
		DECLARE @target_category_id int;
		SELECT @target_category_id = category_id
		  FROM un_co_dept_categories
		 WHERE category_name = @source_category_name
		   AND co_id = @target_co_id
		   AND dept_id = @target_dept_id
		   AND category_type = @source_category_type;
		   
		IF @@ROWCOUNT = 0
		BEGIN
			INSERT 
			  INTO	un_co_dept_categories(category_name,category_type,co_id,dept_id,flg_delete)
			 VALUES (@source_category_name,@source_category_type,@target_co_id,@target_dept_id,0);
			
			SELECT @target_category_id = @@IDENTITY;	 
		END
		
		DECLARE @index int;
		SELECT @index = ISNULL(MAX(index_seq),0) + 1 
		 FROM un_ref_co_dept_tools
		WHERE co_id = @target_co_id
		 AND dept_id = @target_dept_id;
		
		INSERT 
		  INTO un_ref_co_dept_tools(category_id,co_id,created_by,date_created,date_last_amended,dept_id,flg_default,
				flg_deleted,index_seq,last_amended_by,name_desc)
	    VALUES (@target_category_id,@target_co_id,@user_id,GETDATE(),GETDATE(),@target_dept_id,@source_tool_default,0,@index,@user_id,@source_tool_name);
	END
	
	COMMIT;

END TRY
BEGIN CATCH
  -- Whoops, there was an error
  IF @@TRANCOUNT > 0
     ROLLBACK
 
  -- Raise an error with the details of the exception
  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int
  SELECT @ErrMsg = ERROR_MESSAGE(),
         @ErrSeverity = ERROR_SEVERITY()
 
  RAISERROR(@ErrMsg, @ErrSeverity, 1)
END CATCH

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.TransferTool')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF EXISTS (Select * from #ErrorLog)
BEGIN
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
END
ELSE
BEGIN
	IF @@TRANCOUNT>0 COMMIT TRANSACTION
END
IF EXISTS (Select * from #ErrorLog)
BEGIN
	Print 'Database synchronization script failed'
	GOTO QuitWithErrors
END
ELSE
BEGIN
	Print 'Database synchronization completed successfully'
END



QuitWithErrors:


